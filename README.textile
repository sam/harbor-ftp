h1. Setup

All necessary Java JAR dependencies are included. Just bundle your Ruby dependencies from the Gemfile.

Then just start it up (I'm using RVM to run JRuby-HEAD (1.7-dev) under OpenJDK 7u4 on OSX):

bc. bin/harbor-ftp

h2. Usage

You can run the server stand-alone, configuring any necessary options by embedding it in your own script if need be. ie:

bc.. require "harbor/ftp
server = Harbor::FTP::Server.new
server.port = 2121
server.start

p. The real fun starts when you embed it however. Say you're writing a Photo sharing app. You want users to be able to log into their account over FTP and upload bucketfuls of photos and you don't want to have to manage a separate process. If the site is running, the FTP server is running.

In order to start the FTP server, and then your usual web-server in your @config.ru@ you'd write something like this:

bc.. require "harbor/ftp"
require "harbor/ftp/sample_user_manager"
require "thread"

server = Harbor::FTP::Server.new
server.port = 21
server.user_manager = Harbor::FTP::SampleUserManager.setup("me", "secret")
ftp_thread = Thread.new { server.start }

run MyAwesomeWebApp

ftp_thread.join

p. And that's it.

h2. TODO

* Implement our own simple UserManager (see: http://svn.apache.org/viewvc/mina/ftpserver/trunk/ftplet-api/src/main/java/org/apache/ftpserver/ftplet/UserManager.java?view=markup)
* Create a much simpler facade in Ruby to configure and start server
** Tests
* Provide base Ruby implementations as reference for common tasks like integrating with your own user authentication system, or overriding the LIST command, etc